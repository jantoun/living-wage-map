@import "compass/css3/filter";
@import "compass/css3/animation";

.map {
  background-color: $contentBackground;

  .home-btn-wrapper{
    position: absolute;
    top: 73px;
    left: 10px;
    height: 26px;
    width: 26px;
    font-size: 16px;
    background-color: $mainBackground;
    border-radius: 4px;
    box-shadow: 0 1px 5px rgba(0,0,0,0.65);
    z-index: 1000;
    cursor: pointer;

    .icon-home{
      margin-left: 2px;
    }

    &:hover{
      background-color: #f4f4f4;
    }
  }

  .county-toggle-wrapper{
    position: absolute;
    left: 46px;
    top: 10px;
    box-shadow: 0 1px 5px rgba(0,0,0,0.65);
    border-radius: 4px;
    z-index: 1000;

    .county-toggle{
      border-top-left-radius: 4px;
      border-bottom-left-radius: 4px;
    }

    .metro-toggle{
      border-top-right-radius: 4px;
      border-bottom-right-radius: 4px;
    }

    .btn-toggle{
      text-align: center;
      font-size: 1.2em;
      padding: 16px;
      color: $light-gray;
      background-color: $highlightBackground;

      &:not(.active){
        cursor: pointer;

        &:hover{
          background-color: #999;
          color: $mainBackground;
        }
      }

      &.active{
        font-weight: bold;
        color: $mainColor;
        background-color: $mainBackground;
        cursor: default;
      }
    }
  }

  &.leaflet-container .leaflet-clickable{
    cursor: default !important;
  }

  .living-wage-labels-layer{
    @include animation(labelsToBlack 2s);
  }

  &[data-active-layer="working-parent-counties"] .living-wage-labels-layer{
    @include filter(invert(1) brightness(1.25) contrast(1.1));
    @include animation(labelsToWhite 1s);
  }

  // .leaflet-tile{
  //   filter:blur(10px);
  //   opacity: 0;
  //   transform: rotate( 0deg ) scale(0);
  // }
  // .leaflet-tile.leaflet-tile-loaded{
  //   filter:blur(0);
  //   opacity: 1;
  //   transform: rotate( 360deg ) scale(1);
  //   transition:.8s all ease-in;
  // }
}

@include keyframes(labelsToWhite) {
  0% {
    @include filter(invert(0) brightness(1) contrast(1));
  }
  100% {
    @include filter(invert(1) brightness(1.25) contrast(1.1));
  }
}

@include keyframes(labelsToBlack) {
  0% {
    @include filter(invert(1) brightness(1.25) contrast(1.1));
  }
  100% {
    @include filter(invert(0) brightness(1) contrast(1));
  }
}